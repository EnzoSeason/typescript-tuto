(()=>{"use strict";var e={752:(e,t,r)=>{const s=r(343),n=r(847);new s.ProjectInput,new n.ProjectList("active"),new n.ProjectList("finished")},809:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Component=void 0,t.Component=class{constructor(e,t,r,s){this.templateEl=document.getElementById(e),this.hostEl=document.getElementById(t);const n=document.importNode(this.templateEl.content,!0);this.el=n.firstElementChild,s&&(this.el.id=s),this.attach(r)}attach(e){e?this.hostEl.insertAdjacentElement("afterbegin",this.el):this.hostEl.insertAdjacentElement("beforeend",this.el)}}},343:function(e,t,r){var s=this&&this.__decorate||function(e,t,r,s){var n,i=arguments.length,o=i<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,r):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,s);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(o=(i<3?n(o):i>3?n(t,r,o):n(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectInput=void 0;const n=r(412),i=r(497),o=r(809);class l extends o.Component{constructor(){super("project-input","app",!0,"user-input"),this.titleInputEl=this.el.querySelector("#title"),this.descriptionInputEl=this.el.querySelector("#description"),this.peopleInputEl=this.el.querySelector("#people"),this.config()}config(){this.el.addEventListener("submit",this.submitHandler)}renderContent(){}gatherUserInput(){const e=this.titleInputEl.value,t=this.descriptionInputEl.value,r=this.peopleInputEl.value;if(n.inputValidate({value:e,required:!0})&&n.inputValidate({value:t,required:!1})&&n.inputValidate({value:r,required:!0}))return[e,t,Number(r)];alert("Form is not completed")}submitHandler(e){if(e.preventDefault(),Array.isArray(this.gatherUserInput())){const[e,t,r]=this.gatherUserInput();i.projectState.addProject(e,t,r),this.clearForm()}}clearForm(){this.titleInputEl.value="",this.descriptionInputEl.value="",this.peopleInputEl.value=""}}s([n.autobind],l.prototype,"submitHandler",null),t.ProjectInput=l},424:function(e,t,r){var s=this&&this.__decorate||function(e,t,r,s){var n,i=arguments.length,o=i<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,r):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,s);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(o=(i<3?n(o):i>3?n(t,r,o):n(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectItem=void 0;const n=r(412),i=r(809);class o extends i.Component{constructor(e,t){super("single-project",e,!1,t.id.toString()),this.project=t,this.config(),this.renderContent()}get nbOfPeople(){return 1===this.project.people?"1 person":this.project.people+" persons"}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id.toString()),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){}config(){this.el.addEventListener("dragstart",this.dragStartHandler)}renderContent(){this.el.querySelector("h2").textContent=this.project.title,this.el.querySelector("h3").textContent=this.nbOfPeople,this.el.querySelector("p").textContent=this.project.desc}}s([n.autobind],o.prototype,"dragStartHandler",null),t.ProjectItem=o},847:function(e,t,r){var s=this&&this.__decorate||function(e,t,r,s){var n,i=arguments.length,o=i<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,r):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,s);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(o=(i<3?n(o):i>3?n(t,r,o):n(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectList=void 0;const n=r(412),i=r(294),o=r(497),l=r(809),a=r(424);class c extends l.Component{constructor(e){super("project-list","app",!1,e+"-projects"),this.type=e,this.assignedProjects=[],this.config(),this.renderContent()}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.el.querySelector("ul").classList.add("droppable"))}dropHandler(e){const t=Number(e.dataTransfer.getData("text/plain"));isNaN(t)||o.projectState.moveProject(t,"active"===this.type?i.ProjectStatus.Active:i.ProjectStatus.Finished),this.el.querySelector("ul").classList.remove("droppable")}dragLeaveHandler(e){this.el.querySelector("ul").classList.remove("droppable")}config(){this.el.addEventListener("dragover",this.dragOverHandler),this.el.addEventListener("drop",this.dropHandler),this.el.addEventListener("dragleave",this.dragLeaveHandler),o.projectState.addListeners((e=>{this.assignedProjects=e.filter((e=>"active"===this.type?e.status===i.ProjectStatus.Active:"finished"===this.type&&e.status===i.ProjectStatus.Finished)),this.renderProjects()}))}renderContent(){const e=this.type+"-projects-list";this.el.querySelector("ul").id=e,this.el.querySelector("h2").textContent=this.type.toUpperCase()+" PROJECTS"}renderProjects(){this.el.querySelector("ul").innerHTML="";for(const e of this.assignedProjects)new a.ProjectItem(this.el.querySelector("ul").id,e)}}s([n.autobind],c.prototype,"dragOverHandler",null),s([n.autobind],c.prototype,"dropHandler",null),s([n.autobind],c.prototype,"dragLeaveHandler",null),t.ProjectList=c},412:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inputValidate=t.autobind=void 0,t.autobind=function(e,t,r){const s=r.value;return{configurable:!0,enumerable:!1,get(){return s.bind(this)}}},t.inputValidate=function(e){let t=!0;return e.required&&(t=t&&0!==String(e.value).trim().length),t}},294:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.Project=t.ProjectStatus=void 0,(r=t.ProjectStatus||(t.ProjectStatus={}))[r.Active=0]="Active",r[r.Finished=1]="Finished";class s{constructor(e,t,r,n,i=++s.projectId){this.title=e,this.desc=t,this.people=r,this.status=n,this.id=i}}t.Project=s,s.projectId=0},281:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.State=void 0,t.State=class{constructor(){this.listeners=[]}addListeners(e){this.listeners.push(e)}}},497:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.projectState=void 0;const s=r(294),n=r(281);class i extends n.State{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new i),this.instance}addProject(e,t,r){const n=new s.Project(e,t,r,s.ProjectStatus.Active);this.projects.push(n),this.notifyListeners()}moveProject(e,t){const r=this.projects.find((t=>t.id===e));r&&r.status!==t&&(r.status=t,this.notifyListeners())}notifyListeners(){for(let e of this.listeners)e(this.projects.slice())}}t.projectState=i.getInstance()}},t={};!function r(s){if(t[s])return t[s].exports;var n=t[s]={exports:{}};return e[s].call(n.exports,n,n.exports,r),n.exports}(752)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,